GIVEN he said
OUTPUT [pronoun(he), conjugated_verb(say, past)]

GIVEN ConjugatedVerb(say(1,1) -> digo,
  - l2_irregular_conjugation(1,pres,1,decir,digo),
  - say -> decir)
AND input=[pronoun(he), conjugated_verb(say, past)]
OUTPUT:
  l2_irregular_conjugation(1,pres,1,decir,digo)  -> decir :-) past + 3 :-(
  say -> decir                                   -> say :-)

1. new.rb receives input keystroke by keystroke, or - for "unknown";
2  shows in grid with score
3. outputs JSON objects recording challenge and result
4. parse JSON; show against grid of entire curriculum

6. When rerun, new.rb can steer toward different challenges, to cover entire language
   (not smart about recency effect, though)
7. Improved persistent report with memory model
  - could be annotations to data/en/* tables? (doesn't compare confusions)
  - what's red (leave out); what's green (assumed); what's yellow (growing edge)

8. User edits report to delete hard things or focus on important things

9. TOO HARD/LATER:
- use timings/responses to hone in on success/failures
- generating the perfectly chosen sentence:
  (not too hard; doesn't repeat known good/bad)

Unrelated improvements:
- eliminate unrealistic language (e.g. "learn tickets")
- add more vocabulary
- add more sophisticated constructions
- Rewrite in BuckleScript
- Automated tests: that certain sentences can be generated
- Automated tests: that errors can be broken down
